[gcode_macro G29]
gcode:
    M140 S110
    M190 S110
    G28
    Z_TILT_ADJUST
    BED_MESH_CALIBRATE profile=mesh
    #BED_MESH_PROFILE SAVE=mesh 
    SAVE_CONFIG

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html

[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro Disable_Steppers]
gcode:
    M84

[gcode_macro RETRACTION_UP]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float + 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}    

[gcode_macro RETRACTION_DOWN]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float - 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}   


[gcode_macro SET_RETRACTIONLENGTH]
gcode:
  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
  GET_RETRACTION


[gcode_macro exhaustfan_on]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=1
###	
	
[gcode_macro exhaustfan_off]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=0
	
	
###		
	
[gcode_macro enclosurefan_on]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
[gcode_macro enclosurefan_off]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=0


[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0
		
###

[gcode_macro LED_on]
gcode:
	SET_PIN PIN=LED value=1   


[gcode_macro LED_off]
gcode:
	SET_PIN PIN=LED value=0  

###	
	
[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005


[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro Automatic_Inputshaper]
gcode:
  SHAPER_CALIBRATE
  Save_config

[gcode_macro Hold_Resonance.]
gcode:
  # Axis
  {% set axis = params.AXIS|string %}
  # Seconds
  {% set seconds = params.SECONDS|int %}
  #Freq
  {%set int = params.FREQ| int%}
  HOLD_RESONANCE {rawparams}

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}


[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro Sensorless_homing_Test]
gcode:
    {% set stepper = params.STEPPER|string %}
    {% set Value = params.VALUE|int %}
    SET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}

[gcode_macro PID_Calibrate_dropdown]
gcode:
    {% set heater = params.HEATER|string %}
    {% set target = params.TARGET|int %}
    PID_CALIBRATE HEATER={heater} TARGET={target}

[gcode_macro Heat_Soak]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105) %}
    {% set SOAK_MINS = params.SOAK_MINS|default(45) %}
    {% set CHAMBER_TARGET = params.CHAMBER_TARGET|default(35) %}
    {% set BED = params.BED|default(110) %}
    {% set chamber = printer['temperature_sensor chamber'] %}
    {% if chamber.temperature < CHAMBER_TARGET|int %}
        G28
        ;DETACH_PROBE
        M106 S255
        G0 X90 Y90 Z1
        M104 S160
        M117 Heating Bed
        M190 S{BED_TEMP}
        M117 Starting Soak
        {% for timer in range(SOAK_MINS|int,0,-1) %}
            M117 Soak: {timer}min left
            M105
            G4 P60000
        {% endfor %}
        M107
    {% endif %}


[delayed_gcode Soak_Time]
gcode:
    {% if printer["gcode_macro Heatsoak"].max_time|int == 0 %}
        { action_respond_info("Soak_Time should only be called if Heatsoak is running.") }
    {% elif ((printer["temperature_sensor chamber"].temperature >= printer["gcode_macro Heatsoak"].chamber_target|int) or (printer["gcode_macro Heatsoak"].elapsed_time|int >= printer["gcode_macro Heatsoak"].max_time|int)) %}
        M107    ; turn off fan
        { action_respond_info("Heatsoak complete") }
        RESTORE_GCODE_STATE NAME=Heatsoak_State MOVE=1
        BASE_RESUME
    {% else %}
        M140 S{printer["gcode_macro Heatsoak"].bed_hold|int}    ; set bed temp to avoid idle timeout

        {% set elapsed = printer["gcode_macro Heatsoak"].elapsed_time|int %}
        {% set max = printer["gcode_macro Heatsoak"].max_time|int %}
        { action_respond_info("Waiting for chamber temp. Seconds elapsed: %d/%d" % (elapsed, max)) }
        
        SET_GCODE_VARIABLE MACRO=Heatsoak VARIABLE=elapsed_time VALUE={printer["gcode_macro Heatsoak"].elapsed_time|int + printer["gcode_macro Heatsoak"].delay|int}
        UPDATE_DELAYED_GCODE ID=Soak_Time DURATION={printer["gcode_macro Heatsoak"].delay|int}  ; wait
    {% endif %}
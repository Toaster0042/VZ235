[gcode_macro G29]
gcode:
    M140 S110
    M190 S110
    G28
    Z_TILT_ADJUST
    BED_MESH_CALIBRATE profile=mesh
    #BED_MESH_PROFILE SAVE=mesh 
    SAVE_CONFIG

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html

[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro Disable_Steppers]
gcode:
    M84

[gcode_macro RETRACTION_UP]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float + 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}    

[gcode_macro RETRACTION_DOWN]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float - 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}   


[gcode_macro SET_RETRACTIONLENGTH]
gcode:
  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
  GET_RETRACTION


[gcode_macro exhaustfan_on]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=1
###	
	
[gcode_macro exhaustfan_off]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=0
	
	
###		
	
[gcode_macro enclosurefan_on]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
[gcode_macro enclosurefan_off]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=0


[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0
		
###

[gcode_macro LED_on]
gcode:
	SET_PIN PIN=LED value=1   


[gcode_macro LED_off]
gcode:
	SET_PIN PIN=LED value=0  

###	
	
[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005


[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro Automatic_Inputshaper]
gcode:
  SHAPER_CALIBRATE
  Save_config

[gcode_macro Hold_Resonance.]
gcode:
  # Axis
  {% set axis = params.AXIS|string %}
  # Seconds
  {% set seconds = params.SECONDS|int %}
  #Freq
  {%set int = params.FREQ| int%}
  HOLD_RESONANCE {rawparams}

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}


[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro Sensorless_homing_Test]
gcode:
    {% set stepper = params.STEPPER|string %}
    {% set Value = params.VALUE|int %}
    SET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}

[gcode_macro PID_Calibrate_dropdown]
gcode:
    {% set heater = params.HEATER|string %}
    {% set target = params.TARGET|int %}
    PID_CALIBRATE HEATER={heater} TARGET={target}




[delayed_gcode Soak_Time]
gcode:
    {% if printer["gcode_macro Heatsoak"].max_time|int == 0 %}
        { action_respond_info("Soak_Time should only be called if Heatsoak is running.") }
    {% elif ((printer["temperature_sensor chamber"].temperature >= printer["gcode_macro Heatsoak"].chamber_target|int) or (printer["gcode_macro Heatsoak"].elapsed_time|int >= printer["gcode_macro Heatsoak"].max_time|int)) %}
        M107    ; turn off fan
        { action_respond_info("Heatsoak complete") }
        RESTORE_GCODE_STATE NAME=Heatsoak_State MOVE=1
        BASE_RESUME
    {% else %}
        M140 S{printer["gcode_macro Heatsoak"].bed_hold|int}    ; set bed temp to avoid idle timeout

        {% set elapsed = printer["gcode_macro Heatsoak"].elapsed_time|int %}
        {% set max = printer["gcode_macro Heatsoak"].max_time|int %}
        { action_respond_info("Waiting for chamber temp. Seconds elapsed: %d/%d" % (elapsed, max)) }
        
        SET_GCODE_VARIABLE MACRO=Heatsoak VARIABLE=elapsed_time VALUE={printer["gcode_macro Heatsoak"].elapsed_time|int + printer["gcode_macro Heatsoak"].delay|int}
        UPDATE_DELAYED_GCODE ID=Soak_Time DURATION={printer["gcode_macro Heatsoak"].delay|int}  ; wait
    {% endif %}

[gcode_shell_command backup_cfg]
 command: /usr/bin/bash /home/pi/printer_data/config/autocommit.sh
 timeout: 30
 verbose: True

 [gcode_macro BACKUP_CFG]
 description: Backs up config directory GitHub
 gcode:
     RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro FLOW_CALIBRATION]
gcode:
    M221 S{params.FLOW}
    SET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}

[gcode_macro DISABLE_Z]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0

[gcode_macro ENABLE_XY]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1

[gcode_macro TEST_Z_DOWN]
gcode:
    {% set amount  = params.amount|default(1)|int %}
    TESTZ Z=-{amount}

[gcode_macro TEST_Z_UP]
gcode:
    {% set amount  = params.amount|default(1)|int %}
    TESTZ Z=+{amount}

[gcode_macro TEST_Z_BISECT_UP]
gcode:
    TESTZ Z=+

[gcode_macro TEST_Z_BISECT_DOWN]
gcode:
    TESTZ Z=-

[gcode_macro PID_HOTEND]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=260

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=110


[gcode_macro TEST_AXIS_SPEED]
gcode:
    # Example: TEST_AXIS_SPEED SPEED=300 X_ACCEL=5000 Y_ACCEL=2000 ITERATIONS=10 Z=10
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(1)|int %}
    # Acceleration
    {% set x_accel  = params.X_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set y_accel  = params.Y_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(30)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    {% set z_pos = params.ZPOS|default(10)|int %}

    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}

        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Home first
    G28

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, x_accel %d, y_accel %d" % (iterations, speed, x_accel, y_accel)) }

    # Absolute positioning
    G90

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={x_accel} ACCEL_TO_DECEL={x_accel}
    SET_KINEMATICS_LIMIT X_ACCEL={x_accel} Y_ACCEL={y_accel}


    # Go to starting position
    G0 X{x_min} Y{y_min} Z{z_pos} F{speed*60}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}

            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}

        # Small pattern
            # Small diagonals
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}

            # Small box
        {% for i in range(4) %}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
        {% endfor %}
    {% endfor %}

    { action_respond_info("TEST_SPEED: CAN NOT RESTORE AXIS LIMITS! Check these.") }
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    
    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro ACCELL_TEST_X]  
gcode:
    
    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}
    
    {% set inset = 10.0|float %} 
    {% set accel = 10000|int %} 
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    
    SAVE_GCODE_STATE NAME=accelltest_state
    
    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
    G1 Z5
    G1 X{minX} Y{minY} F{speed} 
    
    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{minX} Y{minY} F{speed}  
        G1 X{maxX} Y{maxY} F{speed}  
    
    {% endfor %}    
    
    RESTORE_GCODE_STATE NAME=accelltest_state 
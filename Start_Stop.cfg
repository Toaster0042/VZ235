#### 
# To make your print_start macro work you need to put a bit of code in your slicer too. Put this in the: Start G-code in SS at printer settings and then Custom G-code. Put in the code down below there.
#
#    PRINT_START EXTRUDER_TEMP={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED_TEMP=[first_layer_bed_temperature]

####
#    In your End G-code you simply put:
#    print_end    ;end script from macro
####

[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(40)|int %}
    # Start bed heating
    M140 S{BED_TEMP}
    SET_FAN_SPEED FAN=chamber_fan SPEED=1
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    M117 Homing...                 ; display message
    G28 Y
    G28 X
    G28 Z
    G1 Z20.0 F600 ;move the platform down 15mm
    G1 X20 Y20 F3000
    #CHAMBER_WARMER
    #CHAMBER_PREHEAT BED_TEMP={BED_TEMP} Z=80 CHAMBER_TEMP={CHAMBER_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    G1 X10 Y10 F3000
    G1 Z0.3 F240
    G92 E0 ;zero the extruded length again
    G1 Y190 E15.0 F1500.0 ; intro line
    G1 X10.4 F5000
    G1 Y10 E30 F1200.0 ; intro line
    G92 E0.0 ;zero the extruded length again
    G1 F9000
    M117 Printing...
    SET_VELOCITY_LIMIT ACCEL=12500

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 15) %}
        {% set x_safe = 10.0 %}
    {% else %}
        {% set x_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 15) %}
        {% set y_safe = 10.0 %}
    {% else %}
        {% set y_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 50.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} + Z10 F3600         ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    SET_FAN_SPEED FAN=chamber_fan SPEED=0
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y - 5} F3600   ; park nozzle at rear
    M84
    M117 Finished!

[gcode_macro CHAMBER_PREHEAT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(85)|int %}
    {% set Z = params.Z|default(80)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(30)|int %}
    
    M140 S{BED_TEMP}        ; Heat bed
    ; Home and center over bed so we can use hotend as a chamber temp sensor, if desired
    G1 X60 Y60 Z{Z} F3000 
    
    {% if CHAMBER_TEMP > 0 %}.
        M106 S255   ; Enable Cooling Fan
    
        TEMPERATURE_WAIT SENSOR="Chamber" MINIMUM={CHAMBER_TEMP}   ; use extruder temp as makeshift chamber temp sensor
    {% endif %}
    M107
    
[gcode_macro HEAT_SOAK]
variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
    
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
    
gcode:
  {% set TARGET = params.TARGET | default(0) | float %}
  {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
    
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
    
  ;; fire up the heater
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    
  ;; run the fan to circulate air
  m106 s64
    
  ;; put the bed and nozzle where they're a safe distance apart
  G28
  G1 X120 Y120 Z25 F1500
        
    
  M84 ;; turn off steppers
    
  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }
    
[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    
[gcode_macro CHAMBER_WARMER]
description: Uses the bed and part cooling fan to warm the chamber
gcode:
    # User Parameters
    {% set z_pcf_height = 100 %} # Height from the bed while warming
    {% set fan_speed = 100 %} # Fan speed in percent

    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|int %}
    {% if printer["temperature_sensor chamber"].CHAMBER_TEMP < CHAMBER_TEMP %}
	# Only move and turn on fan if chamber is not to temp.
        G90                                                                        # Absolute positioning
        # park above bed center
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{z_pcf_height}
        M106 S{fan_speed / 100 * 255}                                              # Max out part cooling to cycle chamber air
        M117 Waiting for chamber temperature {chamberTemp}c...
        TEMPERATURE_WAIT SENSOR="Chamber" MINIMUM={CHAMBER_TEMP} # Wait for chamber temp
        M106 S0                                                                    # Disable part cooling fan after soak
    {% endif %}
    M117 Chamber at temp